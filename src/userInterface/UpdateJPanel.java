/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface;

import backEnd.Employee;
import backEnd.EmployeeHistory;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author sunilrudrakumar
 */
public class UpdateJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateJPanel
     */
    
    EmployeeHistory history;
    public UpdateJPanel(EmployeeHistory history) {
        initComponents();
        this.history = history;
        btnSave.setVisible(false);
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtPositionTitle = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        txtCellPhoneNumber = new javax.swing.JTextField();
        lblEmployeeId = new javax.swing.JLabel();
        lblCellPhoneNumber = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEmployee = new javax.swing.JTable();
        btnUpdateEmp = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        lblImageIcon = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtEmployeeId = new javax.swing.JTextField();
        lblStartDate = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblTeamInfo = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        txtStartDate = new javax.swing.JTextField();
        lblPositionTitle = new javax.swing.JLabel();
        txtLevel = new javax.swing.JTextField();
        txtTeamInfo = new javax.swing.JTextField();
        txtGender = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();

        setBackground(new java.awt.Color(99, 10, 153));

        lblName.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblName.setText("Name");

        lblEmployeeId.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEmployeeId.setText("Employee ID");

        lblCellPhoneNumber.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblCellPhoneNumber.setText("Cell Phone Number");

        lblAge.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblAge.setText("Age");

        tblEmployee.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Employee ID", "Email ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEmployee);

        btnUpdateEmp.setBackground(new java.awt.Color(54, 33, 89));
        btnUpdateEmp.setText("Make Changes");
        btnUpdateEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateEmpActionPerformed(evt);
            }
        });

        lblEmail.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblEmail.setText("Email Address");

        lblGender.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblGender.setText("Gender");

        lblStartDate.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblStartDate.setText("Start Date");

        lblLevel.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblLevel.setText("Level");

        lblTeamInfo.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblTeamInfo.setText("Team Info");

        btnSave.setBackground(new java.awt.Color(54, 33, 89));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblPositionTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        lblPositionTitle.setText("Position Title");

        btnSearch.setBackground(new java.awt.Color(54, 33, 89));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(lblStartDate)
                            .addComponent(lblLevel)
                            .addComponent(lblTeamInfo)
                            .addComponent(lblPositionTitle)
                            .addComponent(lblCellPhoneNumber)
                            .addComponent(lblEmail)
                            .addComponent(lblEmployeeId)
                            .addComponent(lblAge)
                            .addComponent(lblGender))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCellPhoneNumber, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPositionTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTeamInfo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLevel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStartDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtEmployeeId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(75, 75, 75)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(btnSearch))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdateEmp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSave))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(lblImageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAge, txtCellPhoneNumber, txtEmail, txtEmployeeId, txtGender, txtLevel, txtName, txtPositionTitle, txtSearch, txtStartDate, txtTeamInfo});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnSave, btnSearch, btnUpdateEmp});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(lblAge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(txtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnUpdateEmp))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch)
                                .addGap(18, 18, 18)
                                .addComponent(btnSave)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(lblLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(lblTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(txtLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(txtTeamInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(txtPositionTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCellPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(txtCellPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(lblImageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtAge, txtCellPhoneNumber, txtEmail, txtEmployeeId, txtGender, txtLevel, txtName, txtPositionTitle, txtSearch, txtStartDate, txtTeamInfo});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSave, btnSearch, btnUpdateEmp});

    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateEmpActionPerformed
        // TODO add your handling code here:
        int  selectedRowIndex = tblEmployee.getSelectedRow();

        if (selectedRowIndex <0){
            JOptionPane.showMessageDialog(this,"Please select a row");
            return;

        }
        DefaultTableModel model = (DefaultTableModel) tblEmployee.getModel();
        Employee selectedEmployee = (Employee) model.getValueAt(selectedRowIndex, 0);
        
        

        txtName.setText(String.valueOf(selectedEmployee.getName()));
        txtEmployeeId.setText(String.valueOf(selectedEmployee.getEmployeeId()));
        txtAge.setText(String.valueOf(selectedEmployee.getAge()));
        txtGender.setText(String.valueOf(selectedEmployee.getGender()));
        txtStartDate.setText(String.valueOf(selectedEmployee.getStartDate()));
        txtLevel.setText(String.valueOf(selectedEmployee.getLevel()));
        txtTeamInfo.setText(String.valueOf(selectedEmployee.getTeamInfo()));
        txtPositionTitle.setText(String.valueOf(selectedEmployee.getPositionTitle()));
        txtCellPhoneNumber.setText(String.valueOf(selectedEmployee.getCellPhoneNumber()));
        txtEmail.setText(String.valueOf(selectedEmployee.getEmail()));
        btnSave.setVisible(true);

    }//GEN-LAST:event_btnUpdateEmpActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            // TODO add your handling code here:
            int flag = 0;
            
                //*************************************** Validation of Empty Name Field ***************************************//
                if(txtName.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane("Name cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                    
                    
                }
                
                //*************************************** Validation of Empty Employee ID Field ***************************************//
                if(txtEmployeeId.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane("Employee ID cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                    
                }
                //*************************************** Validation of Empty Age Field ***************************************//
                if(txtAge.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane("Age cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                }
                //*************************************** Validation of Empty StartDate Field ***************************************//
                if(txtStartDate.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane("Start Date cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                }
                //*************************************** Validation of Empty Level Field ***************************************//
                if(txtLevel.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane("Level cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                    
                }
                //*************************************** Validation of Empty TeamInfo Field ***************************************//
                if(txtTeamInfo.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane("Team Info cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                }
                //*************************************** Validation of Empty PositionTitle Field ***************************************//
                if(txtPositionTitle.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane("Position Title cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                }
                //*************************************** Validation of Empty PhoneNumber Field ***************************************//
                if(txtCellPhoneNumber.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane(" Cell Phone Number cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                    txtCellPhoneNumber.setText("");
                }
                //*************************************** Validation of Empty Email Field ***************************************//
                
                if(txtEmail.getText().isEmpty()){
                    JOptionPane optionPane = new JOptionPane(" Email cannot be empty", JOptionPane.ERROR_MESSAGE);
                    JDialog dialog = optionPane.createDialog("Error Message");
                    dialog.setAlwaysOnTop(true);
                    dialog.setVisible(true);
                    flag = 1;
                    txtEmail.setText("");
                }
                //***************************************Validation of EmailAddress ***************************************//
                
                String email1 = txtEmail.getText();
                Pattern pattern1 = Pattern.compile("^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$");
                Matcher matcher1 = pattern1.matcher(email1);
                if(!matcher1.matches())
                {
                    JOptionPane.showMessageDialog(this,"Enter a valid Email Address!");
                    flag = 1;
                    txtEmail.setText("");
                    
                }
              
                
                //***************************************Validation of EmployeeID Format ***************************************//
                String employeeId2 = txtEmployeeId.getText();
                Pattern pattern2 = Pattern.compile("^[a-zA-Z0-9- ]{1,50}$");
                Matcher matcher2 =pattern2.matcher(employeeId2);
                if(!matcher2.matches())
                {
                    JOptionPane.showMessageDialog(this,"Enter a Valid Employee ID!");
                    flag = 1;
                    txtEmployeeId.setText("");
                    
                    
                    
                }
                
                //*************************************** Validation of CellPhoneNumber ***************************************//
                
                String cellPhoneNumber3 = txtCellPhoneNumber.getText();
                Pattern pattern3 = Pattern.compile("^[0-9]{10}$");
                Matcher matcher3 = pattern3.matcher(cellPhoneNumber3);
                if(!matcher3.matches())
                {
                    JOptionPane.showMessageDialog(this,"Enter a valid Cell Phone Number!");
                    flag = 1;
                    txtCellPhoneNumber.setText("");
                    
                    
                }
                
                //*************************************** Validation of Level ***************************************//
                
                String level4 = txtLevel.getText();
                Pattern pattern4 = Pattern.compile("^[a-zA-Z0-9- ]{1,50}$");
                Matcher matcher4 = pattern4.matcher(level4);
                if(!matcher4.matches())
                {
                    JOptionPane.showMessageDialog(this,"Enter a valid Level!");
                    flag = 1;
                    txtLevel.setText("");
                    
                }
                
                //*************************************** Validation of TeamInfo ***************************************//
                
                String teamInfo5 = txtTeamInfo.getText();
                Pattern pattern5 = Pattern.compile("^[a-zA-Z0-9- ]{1,50}$");
                Matcher matcher5 = pattern5.matcher(teamInfo5);
                if(!matcher5.matches())
                {
                    JOptionPane.showMessageDialog(this,"Enter a valid Team Info!");
                    flag = 1;
                    txtTeamInfo.setText("");
                    
                    
                }
                //************************************* Validation of PositionTitle ***************************************//
                
                String positionTitle6 = txtPositionTitle.getText();
                Pattern pattern6 = Pattern.compile("^[a-zA-Z0-9- ]{1,50}$");
                Matcher matcher6 = pattern6.matcher(positionTitle6);
                if(!matcher6.matches())
                {
                    JOptionPane.showMessageDialog(this,"Enter a valid Position Title!");
                    flag = 1;
                    txtPositionTitle.setText("");
                    
                }
                
                //***************************************Validation of Name ***************************************//
                
                String name7 = txtName.getText();
                Pattern pattern7 = Pattern.compile("^[a-zA-Z0-9- ]{1,50}$");
                Matcher matcher7 = pattern7.matcher(name7);
                if(!matcher7.matches())
                {
                    JOptionPane.showMessageDialog(this,"Enter a valid Name!");
                    flag = 1;
                    txtName.setText("");
                    
                }
                
                
                //***************************************Validation of Name ***************************************//
                
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
                try{
                    formatter.parse(txtStartDate.getText());

                } 
                catch(Exception e){
                     JOptionPane.showMessageDialog(this,"Please enter valid date format (MM/dd/yyyy)");
                     txtStartDate.setText("");
                     flag = 1;
                }
 
            //*************************************** Saving The Values into Variables ***************************************//
            
            int  selectedRowIndex = tblEmployee.getSelectedRow();
            if (selectedRowIndex <0){
                JOptionPane.showMessageDialog(this,"Please select a row");
                
                return;
            }
            
            DefaultTableModel model = (DefaultTableModel) tblEmployee.getModel();
            Employee selectedEmployee = (Employee) model.getValueAt(selectedRowIndex, 0);
            
            SimpleDateFormat formatter1 = new SimpleDateFormat("mm/DD/YYYY",Locale.ENGLISH);
            Date startDate = formatter1.parse(txtStartDate.getText());
            String name = txtName.getText();
            String employeeId = txtEmployeeId.getText();
            int age = Integer.parseInt(txtAge.getText());
            String gender = txtGender.getText();
            String level = txtLevel.getText();
            String teamInfo = txtTeamInfo.getText();
            String positionTitle = txtPositionTitle.getText();
            long cellPhoneNumber = Integer.parseInt(txtCellPhoneNumber.getText());
            String email = txtEmail.getText();
            
            
            if(flag == 0){
            selectedEmployee.setName(name);
            selectedEmployee.setEmployeeId(employeeId);
            selectedEmployee.setAge(age);
            selectedEmployee.setGender(gender);
            selectedEmployee.setStartDate(startDate);
            selectedEmployee.setLevel(level);
            selectedEmployee.setTeamInfo(teamInfo);
            selectedEmployee.setPositionTitle(positionTitle);
            selectedEmployee.setCellPhoneNumber(cellPhoneNumber);
            selectedEmployee.setEmail(email);

            JOptionPane.showMessageDialog(this,"Employee details Added Successfullly");

            txtName.setText("");
            txtEmployeeId.setText("");
            txtAge.setText("");
            txtStartDate.setText("");
            txtLevel.setText("");
            txtTeamInfo.setText("");
            txtPositionTitle.setText("");
            txtEmail.setText("");
            txtCellPhoneNumber.setText("");
            txtGender.setText("");
            model.fireTableDataChanged();
             
            }
        } 
            catch (ParseException ex) {
            Logger.getLogger(UpdateJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed
       //*************************************** Implementation Search functionality ***************************************//
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here: 
        DefaultTableModel model = (DefaultTableModel) tblEmployee.getModel();
        String search = txtSearch.getText().toLowerCase();
        TableRowSorter<DefaultTableModel> tablerow = new TableRowSorter<DefaultTableModel>(model);
        tblEmployee.setRowSorter(tablerow);
        tablerow.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_btnSearchActionPerformed
        //*************************************** Poopulating values into Table ***************************************//
    
        private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblEmployee.getModel();
        model.setRowCount(0);
        
        for(Employee iterator : history.getHistory()){
        Object[] row = new Object[10];
        row[0] = iterator;
        row[1] = iterator.getEmployeeId();
        row[2] = iterator.getEmail();
        
        
        model.addRow(row);
        }   
    }
    //*************************************** End of Functionalities *******************************************//

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdateEmp;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCellPhoneNumber;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEmployeeId;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblImageIcon;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPositionTitle;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblTeamInfo;
    private javax.swing.JTable tblEmployee;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCellPhoneNumber;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtEmployeeId;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtLevel;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPositionTitle;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtStartDate;
    private javax.swing.JTextField txtTeamInfo;
    // End of variables declaration//GEN-END:variables

}
